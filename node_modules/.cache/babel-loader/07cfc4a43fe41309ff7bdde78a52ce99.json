{"ast":null,"code":"var _jsxFileName = \"/home/lourenco/Documents/Robot Nasa/robot-front/src/components/ShipAndGrid.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport spaceship from '../images/spaceship.png';\nimport '../styles/shipAndGrid.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Tile = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tile\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 10\n  }, this);\n};\n\n_c = Tile;\n\nconst transformDirectionToDegree = direction => {\n  let rotationDegree = '';\n\n  switch (direction) {\n    case 'N':\n      rotationDegree = '0deg';\n      break;\n\n    case 'E':\n      rotationDegree = '90deg';\n      break;\n\n    case 'S':\n      rotationDegree = '180deg';\n      break;\n\n    case 'W':\n      rotationDegree = '-90deg';\n      break;\n\n    default:\n      rotationDegree = '';\n      return rotationDegree;\n  }\n};\n\nconst Board = () => {\n  _s();\n\n  const [robotPosition, setRobotPosition] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = async () => {\n    await setIsLoading(true);\n    const URL = 'http://localhost:3333/robot';\n    const response = await fetch(URL);\n    const data = await response.json();\n    setRobotPosition(data);\n    await setIsLoading(false);\n    console.log('data', data[0].current_position);\n  };\n\n  const boardSize = [0, 1, 2, 3, 4];\n  const reverseBoardSize = [4, 3, 2, 1, 0];\n  const {\n    x,\n    y,\n    d\n  } = robotPosition;\n  console.log('robotPase', robotPosition);\n  const transform = transformDirectionToDegree(robotPos[2]);\n  const robotDir = {\n    transform: `rotate(${transform})`\n  };\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: reverseBoardSize.map(row => {\n      return boardSize.map(column => robotPos[0] === column && robotPos[1] === row ? /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"robotImg\",\n        src: spaceship,\n        style: robotDir\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tile\",\n        children: [\"robot \", column, \" \", row]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this));\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Board, \"+c7llRqDqYYAowChJnXDycJ+85w=\");\n\n_c2 = Board;\nexport default Board;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Tile\");\n$RefreshReg$(_c2, \"Board\");","map":{"version":3,"sources":["/home/lourenco/Documents/Robot Nasa/robot-front/src/components/ShipAndGrid.jsx"],"names":["React","useState","useEffect","spaceship","Tile","transformDirectionToDegree","direction","rotationDegree","Board","robotPosition","setRobotPosition","isLoading","setIsLoading","loadData","URL","response","fetch","data","json","console","log","current_position","boardSize","reverseBoardSize","x","y","d","transform","robotPos","robotDir","map","row","column"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport spaceship from '../images/spaceship.png';\nimport '../styles/shipAndGrid.css';\n\nconst Tile = () => {\n  return <div className=\"tile\"></div>;\n};\n\nconst transformDirectionToDegree = (direction) => {\n  let rotationDegree = ''\n  switch (direction) {\n    case 'N':\n      rotationDegree = '0deg'\n      break;\n    case 'E':\n      rotationDegree = '90deg'\n      break;\n    case 'S':\n      rotationDegree = '180deg'\n      break;\n    case 'W':\n      rotationDegree =  '-90deg'\n    break;\n    default: rotationDegree = ''\n\n    return rotationDegree;\n  }\n}\n\nconst Board = () => {\n  const [robotPosition, setRobotPosition] = useState([])\n  const [isLoading, setIsLoading] = useState(false)\n\n\n  useEffect(() => {\n    loadData();\n  }, [])\n\n  const loadData = async () => {\n  await setIsLoading(true)\n  const URL = 'http://localhost:3333/robot'\n  const response = await fetch(URL);\n  const data = await response.json()\n  setRobotPosition(data)\n  await setIsLoading(false)\n  console.log('data', (data[0].current_position))\n}\n  const boardSize = [0, 1, 2, 3, 4];\n  const reverseBoardSize = [4, 3, 2, 1, 0];\n  const {x, y, d} = robotPosition\n  console.log('robotPase', robotPosition)\n  const transform = transformDirectionToDegree(robotPos[2])\n  const robotDir = {transform: `rotate(${transform})`}\n\n  if (isLoading) return <div>loading</div>\n  return (\n    <div className=\"board\">\n      {reverseBoardSize.map((row) => {\n        return boardSize.map((column) =>\n          robotPos[0] === column && robotPos[1] === row ? (\n            <img className=\"robotImg\" src={spaceship} style={robotDir} />\n          ) : (\n            <div className=\"tile\">\n              robot {column} {row}\n            </div>\n          ),\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}