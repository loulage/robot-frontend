{"ast":null,"code":"var _jsxFileName = \"/home/lourenco/Documents/Robot Nasa/robot-front/src/components/ShipAndGrid.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport spaceship from '../images/spaceship.png';\nimport '../styles/shipAndGrid.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Tile = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tile\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 10\n  }, this);\n};\n\n_c = Tile;\n\nconst Robot = _ref => {\n  let {\n    spaceshipLogo,\n    robotDirection\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tile\",\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"robotImg\",\n      src: spaceshipLogo,\n      style: robotDirection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Robot;\n\nconst transformDirectionToDegree = direction => {\n  let rotationDegree;\n\n  switch (direction) {\n    case 'N':\n      return rotationDegree = '0deg';\n\n    case 'E':\n      return rotationDegree = '90deg';\n\n    case 'S':\n      return rotationDegree = '180deg';\n\n    case 'W':\n      return rotationDegree = '-90deg';\n  }\n};\n\nconst parseCurrentPosition = array => {\n  const [x, y, z] = array;\n  const parsedCP = [+x, +y, z];\n  return parsedCP;\n};\n\nconst Board = () => {\n  _s();\n\n  const [robotPosition, setRobotPosition] = useState([]);\n  const [haveRobot, setHaveRobot] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = async () => {\n    await setIsLoading(true);\n    const URL = 'http://localhost:3333/robot';\n    const response = await fetch(URL);\n    const data = await response.json();\n    setHaveRobot(data);\n    setRobotPosition(data[0].current_position);\n    await setIsLoading(false);\n  };\n\n  const createRobot = async () => {\n    console.log('inicio, haverobot', haveRobot);\n\n    if (!haveRobot) {\n      const robot = await fetch('http://localhost:3333/robot', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: ''\n      });\n      const content = await robot.json();\n      await setHaveRobot(content);\n      console.log('dentro do create body final', haveRobot);\n    }\n  };\n\n  const boardSize = [0, 1, 2, 3, 4];\n  const reverseBoardSize = [4, 3, 2, 1, 0];\n  const parsedRobotCurrentLocation = parseCurrentPosition(robotPosition);\n  const transform = transformDirectionToDegree(parsedRobotCurrentLocation[2]);\n  const robotDir = {\n    transform: `rotate(${transform})`\n  };\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: reverseBoardSize.map(row => {\n      return boardSize.map(column => parsedRobotCurrentLocation[0] === column && parsedRobotCurrentLocation[1] === row ? /*#__PURE__*/_jsxDEV(Robot, {\n        spaceshipLogo: spaceship,\n        robotDirection: robotDir\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Tile, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this));\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Board, \"Uz8KiddIQCtiDHbP+A/wUVpISS8=\");\n\n_c3 = Board;\nexport default Board;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Tile\");\n$RefreshReg$(_c2, \"Robot\");\n$RefreshReg$(_c3, \"Board\");","map":{"version":3,"sources":["/home/lourenco/Documents/Robot Nasa/robot-front/src/components/ShipAndGrid.jsx"],"names":["React","useState","useEffect","spaceship","Tile","Robot","spaceshipLogo","robotDirection","transformDirectionToDegree","direction","rotationDegree","parseCurrentPosition","array","x","y","z","parsedCP","Board","robotPosition","setRobotPosition","haveRobot","setHaveRobot","isLoading","setIsLoading","loadData","URL","response","fetch","data","json","current_position","createRobot","console","log","robot","method","headers","body","content","boardSize","reverseBoardSize","parsedRobotCurrentLocation","transform","robotDir","map","row","column"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport spaceship from '../images/spaceship.png';\nimport '../styles/shipAndGrid.css';\n\nconst Tile = () => {\n  return <div className=\"tile\"></div>;\n};\n\nconst Robot = ({spaceshipLogo, robotDirection}) => {\n  return (\n    <div className=\"tile\">\n      <img className=\"robotImg\" src={spaceshipLogo} style={robotDirection} />\n    </div>\n    ) \n  }\n\nconst transformDirectionToDegree = (direction) => {\n  let rotationDegree\n  switch (direction) {\n    case 'N':\n      return rotationDegree = '0deg'\n    case 'E':\n      return rotationDegree = '90deg'\n\n    case 'S':\n      return rotationDegree = '180deg'\n    case 'W':\n      return rotationDegree =  '-90deg'\n\n  }\n}\n\nconst parseCurrentPosition = (array) => {\n  const [x, y, z] = array;\n  const parsedCP = [+x, +y, z]\n  return parsedCP\n}\n\n\nconst Board = () => {\n  const [robotPosition, setRobotPosition] = useState([])\n  const [haveRobot, setHaveRobot] = useState([])\n  const [isLoading, setIsLoading] = useState(false)\n\n\n  useEffect(() => {\n    loadData();\n  }, [])\n\n  const loadData = async () => {\n  await setIsLoading(true)\n  const URL = 'http://localhost:3333/robot'\n  const response = await fetch(URL);\n  const data = await response.json()\n  setHaveRobot(data)\n  setRobotPosition(data[0].current_position)\n  await setIsLoading(false)\n}\n\nconst createRobot = async () => {\n  console.log('inicio, haverobot', haveRobot)\n  if (!haveRobot) {\n    \n    const robot = await fetch('http://localhost:3333/robot', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: '',\n    })\n    const content = await robot.json()\n    await setHaveRobot(content)\n\n    console.log('dentro do create body final', haveRobot)\n  }\n}\n\n  const boardSize = [0, 1, 2, 3, 4];\n  const reverseBoardSize = [4, 3, 2, 1, 0];\n  const parsedRobotCurrentLocation = parseCurrentPosition(robotPosition)\n  const transform = transformDirectionToDegree(parsedRobotCurrentLocation[2])\n  const robotDir = {transform: `rotate(${transform})`}\n\n  if (isLoading) return <div>loading</div>\n  return (\n    <div className=\"board\">\n      {reverseBoardSize.map((row) => {\n        return boardSize.map((column) =>\n          parsedRobotCurrentLocation[0] === column && parsedRobotCurrentLocation[1] === row ? (\n            <Robot spaceshipLogo={spaceship} robotDirection={robotDir} />\n          ) : (\n            <Tile />\n          ),\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}